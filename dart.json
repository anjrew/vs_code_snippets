{
	// Place your snippets for dart here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Behaviour subject": {
		"prefix": "bhsb",
		"body": [
			"BehaviorSubject<$2> $1 = new BehaviorSubject<$2>();",

			"$1.close();"
		],
		"description": "Create a new Behaviour subject"
	},

	"Stream Controller": {
		"prefix": "strmc",
		"body": [
			"StreamController<$2> $1 = new StreamController<$2>();",

			"$1.close();"
		],
		"description": "Create a new Stream Controller"
	},

	"Private Variable": {
		"prefix": "vpr",
		"body": [
			"$2 _$1 = new $2();",

		],
		"description": "Create a new Private Variable"
	},

	"Public Variable": {
		"prefix": "vpub",
		"body": [
			"$2 $1 = new $2();",
		],
		"description": "Create a new Public Variable"
	},

	"Static Variable": {
		"prefix": "vstc",
		"body": [
			"static $2 _$1 = new $2();",
		],
		"description": "Create a new Static Variable"
	},

	"Variable": {
		"prefix": "v",
		"body": [
			"$2 $1 = new $2();",
			"$2 get $3 => $1;",
			"set$3($2 $3) => $1;"
		],
		"description": "Create a new Public Variable"
	},	

	"StreamBuilder with type": {
		"prefix": "strbld",
		"body": [
			"StreamBuilder<$1>(",
				"stream: $2," ,
				"initialData: $3,",
				"builder: (BuildContext streamContext, AsyncSnapshot<$1> snapshot) =>",
				" ",
				"),"
		],
		"description": "Create a new StreamBuilder with type "
	},
	
	"Scope Model Descendant": {
		"prefix": "scmd",
		"body": [
			"ScopedModelDescendant<$1>",
			"(builder: (BuildContext modelContext ,_, $1 $2) => ),",
		],
		"description": "Scope Model Descendant"
	},

	"Scoped Model Descendant that rebuilds on change": {
		"prefix": "smdrc",
		"body": [
			"ScopedModelDescendant<$2>",
			"( rebuildOnChange: true, builder: (BuildContext modelContext, _ ,$1 ) =>"
		],
		"description": "Create a new scoped model decendantthat rebuilds on change"
	},	

	"Scoped Model": {
		"prefix": "scm",
		"body": [
			"ScopedModel<$3>( model: $1, child: $2 );",
		],
		"description": "Create a Scoped Model widget"
	},
	
	"Void Function": {
		"prefix": "vd",
		"body": [
			"void $1 ($2){$3}",
		],
		"description": "void Function"
	},
	

	"Void async Function": {
		"prefix": "vda",
		"body": [
			"void $1 ($2)async{$3}",
		],
		"description": "Void async Function"
	},


	"required prarameter": {
		"prefix": "req",
		"body": [
			"@required this.$1",
		],
		"description": "Add a required parameter"
	},            
}

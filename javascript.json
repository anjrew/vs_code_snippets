{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	
	"editor.snippetSuggestions": "top",


	"Create a for loop with var": {
		"prefix": "forvar",
		"body": [
			"for (var $1 = 0; $1 < $2.length; $1++) {",
			"	$3",	       
			"}"
		],
		"description": "Create a foor loop with vars"
	},

	"Stop Propergation": {
		"prefix": "stopPropagation()",
		"body": [
			".stopPropagation()",
		],
		"description": "Stop bubbling within the element tree"
	},

	"Append html jQuery": {
		"prefix": "append()",
		"body": [
			"append($1)",
		],
		"description": "Append html code using jQuery library"
	},

	"Prepend html jQuery": {
		"prefix": "prepend()",
		"body": [
			"prepend($1)",
		],
		"description": "A function that adds html code to the start of a html element using jQuery library",
	},

	"Children of a jQuery element": {
		"prefix": "children()",
		"body": [
			"children($1)",
		],
		"description": "A function that returns the child element of a html element"
	},

	"Loop thought children of a jQuery object": {
		"prefix": "each()",
		"body": [
			"each($1)",
		],
		"description": "A function that iterates over a jQuery object, executing a function for each matched element."
	},

	"Remove a class of a jQuery object": {
		"prefix": "removeClass()",
		"body": [
			"removeClass($1)",
		],
		"description": "A function to remove an existng class on a jQuery object."
	},

	"Get the target element of a DOM event": {
		"prefix": "target",
		"body": [
			"target",
		],
		"description": "Remove an existng class on a jQuery object."
	},

	"Add a class to jQuery object": {
		"prefix": "addClass()",
		"body": [
			"addClass($1)",
		],
		"description": "Adds the specified class(es) to each element in the set of matched elements."
	},

	"Empty child codes of a jQuery object": {
		"prefix": "addClass()",
		"body": [
			"empty($1)",
		],
		"description": "Remove all child nodes of the set of matched elements from the DOM."
	},

	"Text content": {
		"prefix": "textContent",
		"body": [
			"textContent",
		],
		"description": "Get the text content of a input."
	},

	
	"jQuery previous element": {
		"prefix": ".prev()",
		"body": [
			".prev()",
		],
		"description": "Get the immediately preceding sibling of each element in the set of matched elements. If a selector is provided, it retrieves the previous sibling only if it matches that selector."
	},

	"jQuery next element": {
		"prefix": ".next()",
		"body": [
			".next()",
		],
		"description": "Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector."
	},

	// childNodes

	"ajax get request": {
		"prefix": "ajaxGet",
		"body": [
			"$.ajax({",
				"type: \"GET\",",
				"   url: \"$1\",",
				"	data: {",
				"		$2",
				"	},",
				"	success: function (responseData) {",
				"		$3",
				"	}",
				"});"
		],
		"description": "Execute a ajax GET request."
	},

	"ajax put request": {
		"prefix": "ajaxPut",
		"body": [
			"$.ajax({",
			"   type: \"PUT\",",
			"   url: \"$1\",",
			"\tdata: {",
			"\t\t$2",
			"\t},",
			"\tsuccess: function (responseData) {",
			"\t\t$3",
			"\t}",
			"});"
		],
		"description": "Execute a ajax PUT request."
	},

	"Return key pressedt": {
		"prefix": "return key pressed",
		"body": [
			"$(document).keydown(function (event) { ",
			"\tif ( event.keyCode == 13){",
			"\t\t",
			"\t}",
			"});",
		],
		"description": "Execute code if the return key is pressed."
	},


	
	// exports.getToken = function(callback) {
	// 	const encoded =
	// 		Buffer.from(`${consumerKey}:${consumerSecret}`).toString("base64")
	// 	;
	
	// 	const req = https.request({
	// 		host: 'api.twitter.com',
	// 		path: '/oauth2/token',
	// 		method: 'POST',
	// 		headers: {
	// 			'content-type': 'application/x-www-form-urlencoded;charset=UTF-8',
	// 			authorization: `Basic ${encoded}`
	// 		}
	// 	}, (res) => {
	// 		if (res.statusCode != 200) {
	// 			callback(new Error(res.statusCode));
	// 		} else {
	// 			let body = '';
	// 			res
	// 				.on('data', chunk => body += chunk)
	// 				.on('end', () => {
	// 					try {
	// 						body = JSON.parse(body);
	// 						callback(null, body.access_token)
	// 					} catch (err) {
	// 						callback(err);
	// 					}
	// 				})
	// 			;
	
	// 		}
	// 	});
	// 	req.on('error', err => {
	// 		console.log(err);
	// 		callback(err);
	// 	})
	// 	req.write('grant_type=client_credentials');
	// 	req.end();
	// };
	
}

// app.use(function (req, res, next) {
// 	console.log('Time: %d', Date.now());
// 	next();
//   });

